/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmMain.java
 *
 * Created on Mar 13, 2010, 2:13:28 PM
 */
package viwiki;

import BUS.ImageBUS;
import BUS.MusicBUS;
import BUS.NewsBUS;
import BUS.RaoVatBUS;
import BUS.VideoBUS;
import BUS.ViwikiPageBUS;
import ViSearchSyncDataService.*;
//import info.bliki.wiki.dump.WikiXMLParser;
//import info.bliki.wiki.model.WikiModel;
import java.awt.Cursor;
import java.io.IOException;
import java.net.MalformedURLException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.xml.datatype.DatatypeConfigurationException;
import org.apache.solr.client.solrj.SolrServerException;

/**
 *
 * @author VinhPham
 */
public class frmMain extends javax.swing.JDialog {

    /** Creates new form frmMain */
    public frmMain(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        btnSyncDataWiki = new javax.swing.JButton();
        btnGenerateSynonyms = new javax.swing.JButton();
        btnSyncDataRaovat = new javax.swing.JButton();
        btnSyncDataMusic = new javax.swing.JButton();
        btnSycnDataVideo = new javax.swing.JButton();
        btnSynDataImage = new javax.swing.JButton();
        btnSyncDataNews = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnSyncDataWiki.setText("Sync Data wiki");
        btnSyncDataWiki.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSyncDataWikiActionPerformed(evt);
            }
        });

        btnGenerateSynonyms.setText("Import Data All");
        btnGenerateSynonyms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateSynonymsActionPerformed(evt);
            }
        });

        btnSyncDataRaovat.setText("Sync Data Raovat");
        btnSyncDataRaovat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSyncDataRaovatActionPerformed(evt);
            }
        });

        btnSyncDataMusic.setText("Sync Data Music");
        btnSyncDataMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSyncDataMusicActionPerformed(evt);
            }
        });

        btnSycnDataVideo.setText("Sync Data Video");
        btnSycnDataVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSycnDataVideoActionPerformed(evt);
            }
        });

        btnSynDataImage.setText("Sync data Image");
        btnSynDataImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSynDataImageActionPerformed(evt);
            }
        });

        btnSyncDataNews.setText("Sync data News");
        btnSyncDataNews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSyncDataNewsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSyncDataNews, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addComponent(btnSynDataImage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addComponent(btnSyncDataMusic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addComponent(btnSyncDataWiki, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerateSynonyms, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(btnSycnDataVideo, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(btnSyncDataRaovat, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSyncDataRaovat, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(btnSyncDataWiki, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSycnDataVideo, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(btnSyncDataMusic, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSynDataImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGenerateSynonyms, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSyncDataNews, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>                        

    private void btnSyncDataWikiActionPerformed(java.awt.event.ActionEvent evt) {                                                

        btnSyncDataWiki.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            System.out.println("starting...");
            ViwikiPageBUS bus = new ViwikiPageBUS();
            int numOfRecords = bus.CountRecord();
            System.out.println("Num or row to sync: " + numOfRecords);
            importDataWiki(numOfRecords);
            System.out.println("Import finished.");
            JOptionPane.showMessageDialog(null, "Finish...");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error...");
        } finally {
            btnSyncDataWiki.setEnabled(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }                                               

    private void btnGenerateSynonymsActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        try {
            System.out.println("starting Syns All...");
            AllBUS bus = new AllBUS();
            int numOfRecords = bus.CountRecord();
            System.out.println("Num or row to sync: " + numOfRecords);
            importDataAll(numOfRecords);
            System.out.println("Import finished.");
            JOptionPane.showMessageDialog(null, "Finish...");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Syns ALL");
        } finally {
            btnSyncDataRaovat.setEnabled(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }                                                   

    private void btnSyncDataRaovatActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        btnSyncDataRaovat.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            System.out.println("starting...");
            RaoVatBUS bus = new RaoVatBUS();
            int numOfRecords = bus.CountRecord();
            System.out.println("Num or row to sync: " + numOfRecords);
            importDataRaoVat(numOfRecords);
            System.out.println("Import finished.");
            JOptionPane.showMessageDialog(null, "Finish...");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error Syns RV");
        } finally {
            btnSyncDataRaovat.setEnabled(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }                                                 

    // Import data music
    private void btnSyncDataMusicActionPerformed(java.awt.event.ActionEvent evt) {                                                 

        btnSyncDataMusic.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            MusicBUS bus = new MusicBUS();
            int numOfRecords = bus.CountRecord();
            try {
                importDataMusic(numOfRecords);
            } catch (DatatypeConfigurationException ex) {
                Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SolrServerException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        }

        btnSyncDataMusic.setEnabled(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }                                                

    // Import data Video
    private void btnSycnDataVideoActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        btnSycnDataVideo.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        try {
            VideoBUS bus = new VideoBUS();
            int numOfRecords = bus.CountRecord();

            importDataVideo(numOfRecords);

        } catch (MalformedURLException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SolrServerException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(frmMain.class.getName()).log(Level.SEVERE, null, ex);
        }

        btnSycnDataVideo.setEnabled(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }                                                

    // Image
    private void btnSynDataImageActionPerformed(java.awt.event.ActionEvent evt) {                                                
        btnSynDataImage.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        ImageBUS bus = new ImageBUS();
        try {
            int numOfRecords = bus.CountRecord();
            importDataImage(numOfRecords);
        } catch (Exception ex) {
        }
        btnSynDataImage.setEnabled(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }                                               

    // News
    private void btnSyncDataNewsActionPerformed(java.awt.event.ActionEvent evt) {                                                
        btnSyncDataNews.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        NewsBUS bus = new NewsBUS();
        try {
            int numOfRecords = bus.CountRecord();
            importDataNews(numOfRecords);
        } catch (Exception ex) {
        }
        btnSyncDataNews.setEnabled(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }                                               

    public void importDataWiki(int numRecord) throws SQLException, MalformedURLException, SolrServerException, IOException, ParseException, DatatypeConfigurationException {
        // TODO code application logic here
        WSIndexService service = new WSIndexService();
        WSIndex port = service.getWSIndexPort();
        int start = 0;
        while (start < numRecord) {
            System.out.println(String.format("importing rows from %d to %d", start, start + 1000));
            ArrayList<ViwikiPageDTO> list = new ArrayList<ViwikiPageDTO>();
            ViwikiPageBUS bus = new ViwikiPageBUS();
            list = bus.getDataList(start, 1000);
            port.syncDataWiki(list);
            start += 1000;
        }
    }

    public void importDataRaoVat(int numRecord) throws SQLException, MalformedURLException, SolrServerException, IOException, ParseException, com.sun.org.apache.xerces.internal.impl.xpath.regex.ParseException, DatatypeConfigurationException {
        // TODO code application logic here
        WSIndexService service = new WSIndexService();
        WSIndex port = service.getWSIndexPort();
        int start = 0;
        while (start < numRecord) {
            System.out.println(String.format("importing rows from %d to %d", start, start + 100));
            ArrayList<RaoVatDTO> list = new ArrayList<RaoVatDTO>();
            RaoVatBUS bus = new RaoVatBUS();
            list = bus.getDataList(start, 100);
            port.syncDataRaovat(list);
            start += 100;
        }
    }

    public void importDataImage(int numRecord) throws SQLException, MalformedURLException, SolrServerException, IOException, ParseException, DatatypeConfigurationException {
        WSIndexService service = new WSIndexService();
        WSIndex port = service.getWSIndexPort();
        int start = 0;
        System.out.println("Image: Num found: " + numRecord);
        while (start < numRecord) {
            System.out.println("Sync form " + start + " to " + (start + 100));
            ArrayList<ImageDTO> list = new ArrayList<ImageDTO>();
            ImageBUS bus = new ImageBUS();
            list = bus.getDataList(start, 100);
            port.syncDataImage(list);
            start += 100;
        }
    }

    public void importDataVideo(int numRecord) throws SQLException, MalformedURLException, SolrServerException, IOException, ParseException {

        WSIndexService service = new WSIndexService();
        WSIndex port = service.getWSIndexPort();
        System.out.println("Video: Num found: " + numRecord);
        int start = 0;
        while (start < numRecord) {
            System.out.println("Sync form " + start + " to " + (start + 100));
            ArrayList<VideoDTO> list = new ArrayList<VideoDTO>();
            VideoBUS bus = new VideoBUS();
            list = bus.getDataList(start, 100);
            port.syncDataVideo(list);
            start += 100;
        }
        System.out.println("Finish");
    }

    public void importDataMusic(int numRecord) throws SQLException, MalformedURLException, SolrServerException, IOException, ParseException, DatatypeConfigurationException {
        WSIndexService service = new WSIndexService();
        WSIndex port = service.getWSIndexPort();
        int start = 0;
        System.out.println("Syns Music: Num found: " + numRecord);
        while (start < numRecord) {
            System.out.println("Sync form " + start + " to " + (start + 100));
            ArrayList<MusicDTO> list = new ArrayList<MusicDTO>();
            MusicBUS bus = new MusicBUS();
            list = bus.getDataList(start, 100);
            port.syncDataMusic(list);
            start += 100;
        }

        System.out.println("Finish");
    }

    public void importDataNews(int numRecord) throws SQLException, MalformedURLException, SolrServerException, IOException, ParseException, DatatypeConfigurationException {
        WSIndexService service = new WSIndexService();
        WSIndex port = service.getWSIndexPort();
        int start = 0;
        System.out.println(String.format("Syns %d data News", numRecord));
        while (start < numRecord) {
            System.out.println(String.format("importing rows from %d to %d", start, start + 100));
            ArrayList<NewsDTO> list = new ArrayList<NewsDTO>();
            NewsBUS bus = new NewsBUS();
            list = bus.getDataList(start, 100);
            port.syncDataNews(list);
            start += 100;
        }
    }
     public void importDataAll(int numRecord) throws SQLException, MalformedURLException, SolrServerException, IOException, ParseException, DatatypeConfigurationException {
        WSIndexService service = new WSIndexService();
        WSIndex port = service.getWSIndexPort();
        int start = 0;
        System.out.println(String.format("Syns %d data All", numRecord));
        while (start < numRecord) {
            System.out.println(String.format("importing rows from %d to %d", start, start + 100));
            ArrayList<PageDTO> list = new ArrayList<PageDTO>();
            AllBUS bus = new AllBUS();
            list = bus.getDataList(start, 100);
            port.syncDataAll(list);
            start += 100;
        }
    }
////
//    /**
//     * @param args the command line arguments
//     */

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                frmMain dialog = new frmMain(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnGenerateSynonyms;
    private javax.swing.JButton btnSycnDataVideo;
    private javax.swing.JButton btnSynDataImage;
    private javax.swing.JButton btnSyncDataMusic;
    private javax.swing.JButton btnSyncDataNews;
    private javax.swing.JButton btnSyncDataRaovat;
    private javax.swing.JButton btnSyncDataWiki;
    // End of variables declaration                   
}
